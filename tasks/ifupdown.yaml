---
# Install packages

- name: Update apt cache
  apt:
    cache_valid_time: 600

- name: Install the required packages in Debian derivatives
  apt:
    name: "{{ network_interface_packages + network_pkgs }}"
    state: present
  environment: "{{ env }}"
  when:
    - network_check_packages
    - ansible_os_family == "Debian"



# TODO
# Template main configurationfile
# This file should contain only minimal configuration for included files
# or all settings if `network_interface_single_file` is enabled

- name: Template interfaces file
  template:
    src: ifupdown_interfaces_main.j2
    dest: /etc/network/interfaces
  when: network_interface_configured_only | bool
  notify: network_interface__handler_restart_networking
  register: p

- set_fact:
    network_interface__configuration_changed: true
  when: p is changed


# TODO
# Editing existing configuration is error prone and should be considered an optional feature.
# This role should manage all of the network settings.

# - name: Make sure the source include line is there in interfaces file
#   lineinfile:
#     regexp: '^source\s+{{ net_path | regex_escape() }}'
#     line: "source {{ net_path }}/*"
#     dest: /etc/network/interfaces
#     state: present
#     insertafter: EOF
#   when: not network_interface_configured_only | bool
  
# # 'source-directory' includes all files inside the directory, see "man 5 interfaces"
# - name: Make sure the source-directory include line is not there in interfaces file
#   lineinfile:
#     regexp: '^source-directory\s+{{ net_path | regex_escape() }}/?'
#     dest: /etc/network/interfaces
#     state: absent
#   when: not network_interface_configured_only | bool

# Template separate configuration files for interfaces

- name: Create the directory for interface cfg files
  file:
    path: "{{ net_path }}"
    state: directory


- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

- name: Include specific tasks for the OS family
  include_tasks: "{{ ansible_os_family }}_initial.yml"

- name: Add default loopback interface interface
  set_fact:
    network_loopback_interfaces: "{{ network_loopback_interfaces | default([]) + [ { 'device' : network_interface_loopback_name } ] }}"
  when: >-
    network_interface_configured_only
    and network_interface_implicit_loopback
    and network_interface_loopback_name not in network_loopback_interfaces | map(attribute='device')

- name: Remove unmanaged configuration files
  import_tasks: "clean_interfaces.yml"
  when: network_interface_configured_only | bool

- name: Configure Loopback interfaces
  include_tasks: "loopback_interfaces.yaml"

- name: Configure Ethernet interfaces
  import_tasks: "ether_interfaces.yml"

- name: Configure Bond interfaces
  import_tasks: "bond_interfaces.yml"

- name: Configure VLAN interfaces
  import_tasks: "vlan_interfaces.yml"

- name: Configure Bridge interfaces
  import_tasks: "bridge_interfaces.yml"
  when: network_bridge_interfaces | length > 0

- set_fact:
    network_interface__all_changed_interfaces: >-
      {{ network_interface__loopback_changed
         + ether_interfaces_changed
         + vlan_interfaces_changed
         + bond_interfaces_changed }}

- set_fact:
    network_interface__configuration_changed: "{{ network_interface__all_changed_interfaces | length > 0 }}"
  



